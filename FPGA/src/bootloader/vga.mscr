/*
    Provides helper functions regarding the integrated VGA framebuffer.
*/

#ifndef LIB_VGA
#define LIB_VGA

// Starting address of VGA framebuffer CFG region
#define VGA_BASE_ADDR 0xE000
view vga_end_addr @0xDFFF;

// The newline character '\n' (ASCII)
#define VGA_NEWLINE 0xA

// VGA dimensions
view vga_dim_x @0xDFFD;
view vga_dim_y @0xDFFE;

// Globals responsible for maintaining internal position buffering
global vga_buf_pos_x = 0;
global vga_buf_pos_y = 0;

// Prints a single character and advances the buffer position by one
func void vga_printChar(char) {
    // Handle newlines
    if char == VGA_NEWLINE {
        vga_buf_pos_x = 0;

        if (vga_buf_pos_y + 1) == vga_dim_y {
            vga_shiftConsoleDown(1);
        } else {
            vga_buf_pos_y += 1;
        }

        return 0;
    }

    // Set framebuffer at buffer location to given character
    $$(
        VGA_BASE_ADDR + (vga_buf_pos_y * vga_dim_x) + vga_buf_pos_x,
        char
    );

    // Advance buffer
    vga_buf_pos_x += 1;

    if vga_buf_pos_x == vga_dim_x {
        vga_buf_pos_x = 0;

        if (vga_buf_pos_y + 1) == vga_dim_y {
            vga_shiftConsoleDown(1);
        } else {
            vga_buf_pos_y += 1;
        }
    }
}

// Prints an entire null-terminated string
func void vga_printString(str) {
    var i = 0;
    var charAt = $(str);
    while charAt != 0 {
        vga_printChar(charAt);
        i += 1;
        charAt = $(str + i);
    }
}

func void vga_printStringh(hptr) {
    var i = 0;
    var charAt = $_(hptr);
    while charAt != 0 {
        vga_printChar(charAt);
        i += 1;
        charAt = $_(hptr + i);
    }
}

// Prints a value as 4 hexadecimal characters
global vga_hex_char_lookup = "0123456789ABCDEF";
func void vga_printHex(value) {
    var mask = 0x000F;
    var masked = (value >> 12) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = (value >> 8) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = (value >> 4) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = value & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
}

func void vga_shiftConsoleDown(lines) {
    if lines > 0 {
        _reg_assign(3, lines);

        // Very hot loops, thus optimized carefully
        _asm {
            setreg A 0xE000 // A ... base address (behind-address)
            loadla C 0xDFFD // C ... VGA width
            mul D SCR1 C // SCR1 ... vga_dim_x * lines
            add A B SCR1 // B ... ahead-address
            loadla E 0xDFFF // E ... end address
            sub E D SCR1 // D ... end address (first loop)
            inc d // optimize gt

            .vga_copy_loop load SCR1 B // Copy lines upwards
            stor SCR1 A
            inc A
            inc B
            jmpgt .vga_copy_loop D A

            inc E // optimize gt

            .vga_clear_loop stor 0 A // Clear remaining lines
            inc A
            jmpgt .vga_clear_loop E A
        }
    }
}

func void vga_setCursorPos(x, y) {
    vga_buf_pos_x = x;
    vga_buf_pos_y = y;

    while (vga_buf_pos_x > vga_dim_x) {
        vga_buf_pos_x -= vga_dim_x;
        vga_buf_pos_y += 1;
    }
}

func void vga_offsetLineCursor(offset) {
    vga_buf_pos_x += offset;

    while (vga_buf_pos_x < 0) {
        vga_buf_pos_x += vga_dim_x;
        vga_buf_pos_y -= 1;
    }

    while (vga_buf_pos_x > vga_dim_x) {
        vga_buf_pos_x -= vga_dim_x;
        vga_buf_pos_y += 1;
    }
}

func void vga_clearScreen() {
    var x = VGA_BASE_ADDR;
    var end = vga_end_addr + 1;
    while (x < end) {
        $$(x, 0);
        x += 1;
    }
}

#endif
