/*
Provides helper functions regarding the integrated VGA framebuffer.
*/

#ifndef LIB_VGA
#define LIB_VGA

#include "base.mscr"

// Starting address of VGA framebuffer CFG region
#define VGA_BASE_ADDR 0xE000
#define VGA_END_ADDR 0xF2BF

// The newline character
#define VGA_NEWLINE 0xA

// VGA dimensions
#define VGA_DIM_X 98
#define VGA_DIM_Y 35

// Globals responsible for maintaining internal position buffering
global vga_buf_pos_x = 0;
global vga_buf_pos_y = 0;

// Prints a single character and advances the buffer position by one
func void vga_printChar(char) {
    // Handle newlines
    if char == VGA_NEWLINE {
        vga_buf_pos_x = 0;

        if (vga_buf_pos_y + 1) == VGA_DIM_Y {
            vga_shiftConsoleDown(true);
        } else {
            vga_buf_pos_y += 1;
        }

        return 0;
    }

    // Set framebuffer at buffer location to given character
    $$(
        VGA_BASE_ADDR + (vga_buf_pos_y * VGA_DIM_X) + vga_buf_pos_x,
        char
    );

    // Advance buffer
    vga_buf_pos_x += 1;

    if vga_buf_pos_x == VGA_DIM_X {
        vga_buf_pos_x = 0;

        if (vga_buf_pos_y + 1) == VGA_DIM_Y {
            vga_shiftConsoleDown(true);
        } else {
            vga_buf_pos_y += 1;
        }
    }
}

// Prints an entire null-terminated string
func void vga_printString(str) {
    var i = 0;
    var charAt = $(str);
    while charAt != 0 {
        vga_printChar(charAt);
        i += 1;
        charAt = $(str + i);
    }
}

// Prints a value as 4 hexadecimal characters
global vga_hex_char_lookup = "0123456789ABCDEF";
func void vga_printHex(value) {
    var mask = 0x000F;
    var masked = (value >> 12) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = (value >> 8) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = (value >> 4) & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
    masked = value & mask;
    vga_printChar($(vga_hex_char_lookup + masked));
}

func void vga_shiftConsoleDown(clearBottomRow) {
    // TODO: Implement correctly
    vga_buf_pos_x = 0;
    vga_buf_pos_y = 0;
    vga_clearScreen();
}

func void vga_setCursorPos(x, y) {
    vga_buf_pos_x = x;
    vga_buf_pos_y = y;

    while vga_buf_pos_x > VGA_DIM_X {
        vga_buf_pos_x -= VGA_DIM_X;
        vga_buf_pos_y += 1;
    }
}

func void vga_clearScreen() {
    var x = VGA_BASE_ADDR;
    while x <= VGA_END_ADDR {
        $$(x, 0);
        x += 1;
    }
}

#endif
