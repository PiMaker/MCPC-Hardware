/*
Main entry point for the MCPC bootloader.
Function "var main(argc, argp)" will be called by the the bootloader preamble at h0.
*/

#include "base.mscr"
#include "vga.mscr"

//global text = "Hello, world!\n";
global prompt = "MCPC> ";

func var main(argc, argp) {
    // Enable interrupts
    _asm {
        set SCR1
        .irq_handler // Declared in asm.ma
        storla SCR1 0x9000
        storla 1 0x9001 // IRQ_EN
    }

    vga_init();
    vga_clearScreen();

    while (true) {
        vga_printString(prompt);

        var read_en = true;
        while (read_en) {
            // Check for new keyboard input
            var key = getKeyPressed();
            if (key != 0) {
                if (key == 0x5A) { // Enter
                    vga_printChar('\n');
                    read_en = false;
                } else { // Anything else
                    vga_printChar(keycodeToASCII(key));
                }
            }
        }
    }

    // Return Esel
    return 0x7353;
}

global releaseKeyWasPressed = false;
global shiftKeyPressed = false;

func var getKeyPressed() {
    var retval = 0;
    var rdptr;
    var wrptr;

    _reg_assign(1, rdptr);
    _reg_assign(2, wrptr);
    _asm {
        setpage 0x1
        loadla B 0x100
        loadla C 0x101
        rstpage
    }

    if rdptr != wrptr {
        _reg_assign(0, retval);
        _reg_assign(1, rdptr);
        _asm {
            setpage 0x1
            load A B // retval <- sram[rdptr]
            inc B
            storla B 0x100 // Increment rdptr
            rstpage
        }

        if retval == 0x0012 {
            shiftKeyPressed = ~releaseKeyWasPressed;
            releaseKeyWasPressed = false;

            return 0;
        }

        if retval == 0x00F0 {
            releaseKeyWasPressed = true;
            return 0;
        }

        if releaseKeyWasPressed {
            releaseKeyWasPressed = false;
            return 0;
        }
    }

    return retval;
}

func var keycodeToASCII(key) {
    if (shiftKeyPressed) {

        if (key == 0x1c) {
            return 'A';
        }

    } else {

        if (key == 0x1c) {
            return 'a';
        }

    }

    return '?';
}
