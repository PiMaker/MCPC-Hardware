/*
    Main entry point for the MCPC bootloader.
    Function "var main(argc, argp)" will be called by the the bootloader preamble at h0.
*/

#include "base.mscr"
#include "memalloc.mscr"
#include "vga.mscr"
#include "keyboard.mscr"
#include "shell.mscr"
#include "interpreter.mscr"

#define PROMPT_INPUT_MAX_LENGTH 256

global welcomeText = "Welcome to mVIRA OS, version 0.1.1\n(C) Stefan Reiter 2019, (tm) TheRealVira\nThis program comes with ABSOLUTELY NO WARRANTY.\n\n";
global prompt = "mVIRA> ";

func var main(argc, argp) {
    // Enable interrupts
    _asm {
        set SCR1
        .irq_handler // Declared in asm.ma
        storla SCR1 0x9000
        storla 1 0x9001 // IRQ_EN
    }

    vga_clearScreen();
    vga_printString(welcomeText);

    /*
        Loop console functionality below.
    */
    var hptr_currentInput = malloc(PROMPT_INPUT_MAX_LENGTH+1);
    var currentInputOffset = 0;

    while (true) {
        vga_printString(prompt);

        var read_en = true;
        while (read_en) {
            // Check for new keyboard input (busy loop)
            var shiftKeyPressed;
            var key = kb_getKeyPressed($$(shiftKeyPressed));

            if (key != 0) {
                if (key == 0x5A) { // Enter
                    vga_printChar('\n');
                    read_en = false;
                } else {
                    if (key == 0x66) { // Backspace
                        if (currentInputOffset > 0) {
                            vga_offsetLineCursor(-1);
                            vga_printChar(' ');
                            vga_offsetLineCursor(-1);
                            currentInputOffset -= 1;
                        }
                    } else { // Anything else, including space (defaults to '?' if unknown)
                        if (currentInputOffset < PROMPT_INPUT_MAX_LENGTH) {
                            var charPressed = kb_keycodeToASCII(key, shiftKeyPressed);
                            vga_printChar(charPressed);
                            $$_(hptr_currentInput + currentInputOffset, charPressed);
                            currentInputOffset += 1;
                        }
                    }
                }
            }
        }

        // Pass off input to interpreter
        if (currentInputOffset > 0) {
            
            // Always null-terminate your strings kids!
            $$_(hptr_currentInput + currentInputOffset, 0);

            shell_run(hptr_currentInput);
        }

        // Reset state for next input
        currentInputOffset = 0;
    }

    // Return Esel (should not happen, ever - we're not donkeys after all)
    return 0x7353;
}
