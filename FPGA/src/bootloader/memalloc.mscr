/*
    Provides a very simple heap memory allocator.
*/

#ifndef LIB_MEMALLOC
#define LIB_MEMALLOC

#include "base.mscr"

#define MEMALLOW_PAGE_NUM 0x2

#define MEMALLOC_HEADER_LENGTH 3
#define MEMALLOC_HEADER_OFFSET_SIZE 0
#define MEMALLOC_HEADER_OFFSET_USED 1
#define MEMALLOC_HEADER_OFFSET_NEXT 2
#define MEMALLOC_HEADER_OFFSET_DATA 3

global memalloc_head = 0x7FFF;

func var malloc(size) {
    var header = memalloc_get_free_block(size);
    if (header) {
        $$_(header+MEMALLOC_HEADER_OFFSET_USED, true);
        return header + MEMALLOC_HEADER_OFFSET_DATA;
    }

    // No free block found, create new one
    var totalSize = (size + MEMALLOC_HEADER_LENGTH);
    
    if (totalSize > memalloc_head) {
        // Out of (heap) memory, fault
        _asm {
            FAULT 0x2
        }
    }

    header = memalloc_head - totalSize;

    $$_(header+MEMALLOC_HEADER_OFFSET_SIZE, size);
    $$_(header+MEMALLOC_HEADER_OFFSET_USED, true);
    $$_(header+MEMALLOC_HEADER_OFFSET_NEXT, memalloc_head);

    memalloc_head = header;

    return memalloc_head + MEMALLOC_HEADER_OFFSET_DATA;
}

func var memalloc_get_free_block(size) {
    return 0;
}

func void free(hptr) {
}

func void $$_(hptr, val) {
    _reg_assign(3, hptr);
    _reg_assign(2, val);
    _asm {
        STOR_P C D MEMALLOW_PAGE_NUM
    }
}

func var $_(hptr) {
    _reg_assign(3, hptr);
    _asm {
        LOAD_P D D MEMALLOW_PAGE_NUM
    }
    return hptr;
}

#endif