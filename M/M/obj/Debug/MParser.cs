//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Repos\MCPC\M\M\Grammar\M.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace M {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, Break=4, Char=5, Continue=6, Do=7, Else=8, For=9, 
		Goto=10, If=11, Inline=12, Int=13, Return=14, Void=15, While=16, LeftParen=17, 
		RightParen=18, LeftBracket=19, RightBracket=20, LeftBrace=21, RightBrace=22, 
		Less=23, LessEqual=24, Greater=25, GreaterEqual=26, LeftShift=27, RightShift=28, 
		Plus=29, PlusPlus=30, Minus=31, MinusMinus=32, Star=33, Div=34, Mod=35, 
		And=36, Or=37, AndAnd=38, OrOr=39, Xor=40, Not=41, Tilde=42, Question=43, 
		Colon=44, Semi=45, Comma=46, Assign=47, Equal=48, NotEqual=49, Dot=50, 
		Identifier=51, Filename=52, Constant=53, DigitSequence=54, StringLiteral=55, 
		Whitespace=56, Newline=57, BlockComment=58, LineComment=59;
	public const int
		RULE_calcExpression = 0, RULE_calcOperator = 1, RULE_unaryCalcOperator = 2, 
		RULE_initializerList = 3, RULE_assignmentExpression = 4, RULE_topLevelAssignmentExpression = 5, 
		RULE_typeSpecifier = 6, RULE_nestedParenthesesBlock = 7, RULE_parameterDeclarationList = 8, 
		RULE_parameterDeclaration = 9, RULE_paramterPassList = 10, RULE_parameterCallList = 11, 
		RULE_statement = 12, RULE_assignmentStatement = 13, RULE_callStatement = 14, 
		RULE_labeledStatement = 15, RULE_compoundStatement = 16, RULE_statementList = 17, 
		RULE_selectionStatement = 18, RULE_iterationStatement = 19, RULE_forCondition = 20, 
		RULE_jumpStatement = 21, RULE_compilationUnit = 22, RULE_translationUnit = 23, 
		RULE_topLevelDeclaration = 24, RULE_functionDefinition = 25, RULE_asmStatement = 26, 
		RULE_preprocessorDirective = 27;
	public static readonly string[] ruleNames = {
		"calcExpression", "calcOperator", "unaryCalcOperator", "initializerList", 
		"assignmentExpression", "topLevelAssignmentExpression", "typeSpecifier", 
		"nestedParenthesesBlock", "parameterDeclarationList", "parameterDeclaration", 
		"paramterPassList", "parameterCallList", "statement", "assignmentStatement", 
		"callStatement", "labeledStatement", "compoundStatement", "statementList", 
		"selectionStatement", "iterationStatement", "forCondition", "jumpStatement", 
		"compilationUnit", "translationUnit", "topLevelDeclaration", "functionDefinition", 
		"asmStatement", "preprocessorDirective"
	};

	private static readonly string[] _LiteralNames = {
		null, "'asm'", "'#'", "'include'", "'break'", "'char'", "'continue'", 
		"'do'", "'else'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'return'", 
		"'void'", "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", 
		"'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", 
		"':'", "';'", "','", "'='", "'=='", "'!='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Break", "Char", "Continue", "Do", "Else", "For", 
		"Goto", "If", "Inline", "Int", "Return", "Void", "While", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Xor", "Not", "Tilde", "Question", "Colon", "Semi", 
		"Comma", "Assign", "Equal", "NotEqual", "Dot", "Identifier", "Filename", 
		"Constant", "DigitSequence", "StringLiteral", "Whitespace", "Newline", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "M.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CalcExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public ITerminalNode StringLiteral() { return GetToken(MParser.StringLiteral, 0); }
		public ITerminalNode Constant() { return GetToken(MParser.Constant, 0); }
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public CalcExpressionContext[] calcExpression() {
			return GetRuleContexts<CalcExpressionContext>();
		}
		public CalcExpressionContext calcExpression(int i) {
			return GetRuleContext<CalcExpressionContext>(i);
		}
		public CalcOperatorContext calcOperator() {
			return GetRuleContext<CalcOperatorContext>(0);
		}
		public UnaryCalcOperatorContext unaryCalcOperator() {
			return GetRuleContext<UnaryCalcOperatorContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public CalcExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterCalcExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitCalcExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcExpressionContext calcExpression() {
		return calcExpression(0);
	}

	private CalcExpressionContext calcExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CalcExpressionContext _localctx = new CalcExpressionContext(_ctx, _parentState);
		CalcExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_calcExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 57; Match(Identifier);
				}
				break;

			case 2:
				{
				State = 58; Match(StringLiteral);
				}
				break;

			case 3:
				{
				State = 59; Match(Constant);
				}
				break;

			case 4:
				{
				State = 60; Match(LeftBrace);
				State = 61; initializerList(0);
				State = 62; Match(RightBrace);
				}
				break;

			case 5:
				{
				State = 64; unaryCalcOperator();
				State = 65; calcExpression(4);
				}
				break;

			case 6:
				{
				State = 67; Match(LeftParen);
				State = 68; typeSpecifier();
				State = 69; Match(RightParen);
				State = 70; calcExpression(2);
				}
				break;

			case 7:
				{
				State = 72; Match(LeftParen);
				State = 73; calcExpression(0);
				State = 74; Match(RightParen);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 86;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 84;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new CalcExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calcExpression);
						State = 78;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 79; calcOperator();
						State = 80; calcExpression(6);
						}
						break;

					case 2:
						{
						_localctx = new CalcExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calcExpression);
						State = 82;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 83; unaryCalcOperator();
						}
						break;
					}
					} 
				}
				State = 88;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CalcOperatorContext : ParserRuleContext {
		public ITerminalNode Less() { return GetToken(MParser.Less, 0); }
		public ITerminalNode LessEqual() { return GetToken(MParser.LessEqual, 0); }
		public ITerminalNode Greater() { return GetToken(MParser.Greater, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(MParser.GreaterEqual, 0); }
		public ITerminalNode LeftShift() { return GetToken(MParser.LeftShift, 0); }
		public ITerminalNode RightShift() { return GetToken(MParser.RightShift, 0); }
		public ITerminalNode Plus() { return GetToken(MParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(MParser.Minus, 0); }
		public ITerminalNode Star() { return GetToken(MParser.Star, 0); }
		public ITerminalNode Div() { return GetToken(MParser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(MParser.Mod, 0); }
		public ITerminalNode And() { return GetToken(MParser.And, 0); }
		public ITerminalNode Or() { return GetToken(MParser.Or, 0); }
		public ITerminalNode AndAnd() { return GetToken(MParser.AndAnd, 0); }
		public ITerminalNode OrOr() { return GetToken(MParser.OrOr, 0); }
		public ITerminalNode Xor() { return GetToken(MParser.Xor, 0); }
		public CalcOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterCalcOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitCalcOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcOperatorContext calcOperator() {
		CalcOperatorContext _localctx = new CalcOperatorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_calcOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << Minus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Xor))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryCalcOperatorContext : ParserRuleContext {
		public ITerminalNode PlusPlus() { return GetToken(MParser.PlusPlus, 0); }
		public ITerminalNode MinusMinus() { return GetToken(MParser.MinusMinus, 0); }
		public ITerminalNode Tilde() { return GetToken(MParser.Tilde, 0); }
		public ITerminalNode Not() { return GetToken(MParser.Not, 0); }
		public ITerminalNode And() { return GetToken(MParser.And, 0); }
		public UnaryCalcOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryCalcOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterUnaryCalcOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitUnaryCalcOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryCalcOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryCalcOperatorContext unaryCalcOperator() {
		UnaryCalcOperatorContext _localctx = new UnaryCalcOperatorContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_unaryCalcOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PlusPlus) | (1L << MinusMinus) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		public ITerminalNode Constant() { return GetToken(MParser.Constant, 0); }
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		return initializerList(0);
	}

	private InitializerListContext initializerList(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InitializerListContext _localctx = new InitializerListContext(_ctx, _parentState);
		InitializerListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_initializerList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 94; Match(Constant);
			}
			_ctx.stop = _input.Lt(-1);
			State = 101;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerList);
					State = 96;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 97; Match(Comma);
					State = 98; Match(Constant);
					}
					} 
				}
				State = 103;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Char) | (1L << Int) | (1L << Void))) != 0)) {
				{
				State = 104; typeSpecifier();
				}
			}

			State = 107; Match(Identifier);
			State = 108; Match(Assign);
			State = 109; calcExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelAssignmentExpressionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public TopLevelAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelAssignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterTopLevelAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitTopLevelAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelAssignmentExpressionContext topLevelAssignmentExpression() {
		TopLevelAssignmentExpressionContext _localctx = new TopLevelAssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_topLevelAssignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; typeSpecifier();
			State = 112; Match(Identifier);
			State = 113; Match(Assign);
			State = 114; calcExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Char) | (1L << Int) | (1L << Void))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterNestedParenthesesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitNestedParenthesesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedParenthesesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << Break) | (1L << Char) | (1L << Continue) | (1L << Do) | (1L << Else) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Return) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Xor) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign) | (1L << Equal) | (1L << NotEqual) | (1L << Dot) | (1L << Identifier) | (1L << Filename) | (1L << Constant) | (1L << DigitSequence) | (1L << StringLiteral) | (1L << Whitespace) | (1L << Newline) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				State = 123;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
				case T__1:
				case T__2:
				case Break:
				case Char:
				case Continue:
				case Do:
				case Else:
				case For:
				case Goto:
				case If:
				case Inline:
				case Int:
				case Return:
				case Void:
				case While:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Xor:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case Equal:
				case NotEqual:
				case Dot:
				case Identifier:
				case Filename:
				case Constant:
				case DigitSequence:
				case StringLiteral:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 118;
					_la = _input.La(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 119; Match(LeftParen);
					State = 120; nestedParenthesesBlock();
					State = 121; Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationListContext : ParserRuleContext {
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		public ParameterDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterParameterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitParameterDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationListContext parameterDeclarationList() {
		return parameterDeclarationList(0);
	}

	private ParameterDeclarationListContext parameterDeclarationList(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ParameterDeclarationListContext _localctx = new ParameterDeclarationListContext(_ctx, _parentState);
		ParameterDeclarationListContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_parameterDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 129; parameterDeclaration();
			}
			_ctx.stop = _input.Lt(-1);
			State = 136;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterDeclarationList);
					State = 131;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 132; Match(Comma);
					State = 133; parameterDeclaration();
					}
					} 
				}
				State = 138;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_parameterDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; typeSpecifier();
			State = 140; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamterPassListContext : ParserRuleContext {
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public ParamterPassListContext paramterPassList() {
			return GetRuleContext<ParamterPassListContext>(0);
		}
		public ParamterPassListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramterPassList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterParamterPassList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitParamterPassList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamterPassList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamterPassListContext paramterPassList() {
		return paramterPassList(0);
	}

	private ParamterPassListContext paramterPassList(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ParamterPassListContext _localctx = new ParamterPassListContext(_ctx, _parentState);
		ParamterPassListContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_paramterPassList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 143; calcExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 150;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParamterPassListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_paramterPassList);
					State = 145;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 146; Match(Comma);
					State = 147; calcExpression(0);
					}
					} 
				}
				State = 152;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterCallListContext : ParserRuleContext {
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public ParameterCallListContext parameterCallList() {
			return GetRuleContext<ParameterCallListContext>(0);
		}
		public ParameterCallListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterCallList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterParameterCallList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitParameterCallList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterCallList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterCallListContext parameterCallList() {
		return parameterCallList(0);
	}

	private ParameterCallListContext parameterCallList(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ParameterCallListContext _localctx = new ParameterCallListContext(_ctx, _parentState);
		ParameterCallListContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_parameterCallList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 154; calcExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 161;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterCallListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterCallList);
					State = 156;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 157; Match(Comma);
					State = 158; calcExpression(0);
					}
					} 
				}
				State = 163;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public AsmStatementContext asmStatement() {
			return GetRuleContext<AsmStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; labeledStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; compoundStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; assignmentStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; selectionStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168; iterationStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 169; callStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170; jumpStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 171; asmStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; assignmentExpression();
			State = 175; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public ParameterCallListContext parameterCallList() {
			return GetRuleContext<ParameterCallListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(Identifier);
			State = 178; Match(LeftParen);
			State = 179; parameterCallList(0);
			State = 180; Match(RightParen);
			State = 181; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(Identifier);
			State = 184; Match(Colon);
			State = 185; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(LeftBrace);
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Break) | (1L << Char) | (1L << Continue) | (1L << Do) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Return) | (1L << Void) | (1L << While) | (1L << LeftBrace) | (1L << Identifier))) != 0)) {
				{
				State = 188; statementList(0);
				}
			}

			State = 191; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		return statementList(0);
	}

	private StatementListContext statementList(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		StatementListContext _localctx = new StatementListContext(_ctx, _parentState);
		StatementListContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_statementList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 194; statement();
			}
			_ctx.stop = _input.Lt(-1);
			State = 200;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementList);
					State = 196;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 197; statement();
					}
					} 
				}
				State = 202;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_selectionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(If);
			State = 204; Match(LeftParen);
			State = 205; calcExpression(0);
			State = 206; Match(RightParen);
			State = 207; statement();
			State = 210;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 208; Match(Else);
				State = 209; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(MParser.While, 0); }
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Do() { return GetToken(MParser.Do, 0); }
		public ITerminalNode For() { return GetToken(MParser.For, 0); }
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_iterationStatement);
		try {
			State = 232;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(While);
				State = 213; Match(LeftParen);
				State = 214; calcExpression(0);
				State = 215; Match(RightParen);
				State = 216; statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; Match(Do);
				State = 219; statement();
				State = 220; Match(While);
				State = 221; Match(LeftParen);
				State = 222; calcExpression(0);
				State = 223; Match(RightParen);
				State = 224; Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226; Match(For);
				State = 227; Match(LeftParen);
				State = 228; forCondition();
				State = 229; Match(RightParen);
				State = 230; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_forCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; assignmentExpression();
			State = 235; Match(Semi);
			State = 237;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << LeftBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << And) | (1L << Not) | (1L << Tilde) | (1L << Identifier) | (1L << Constant) | (1L << StringLiteral))) != 0)) {
				{
				State = 236; calcExpression(0);
				}
			}

			State = 239; Match(Semi);
			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Char) | (1L << Int) | (1L << Void) | (1L << Identifier))) != 0)) {
				{
				State = 240; assignmentExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public CalcExpressionContext calcExpression() {
			return GetRuleContext<CalcExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_jumpStatement);
		int _la;
		try {
			State = 255;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Goto:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; Match(Goto);
				State = 244; Match(Identifier);
				State = 245; Match(Semi);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(Continue);
				State = 247; Match(Semi);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248; Match(Break);
				State = 249; Match(Semi);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250; Match(Return);
				State = 252;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << LeftBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << And) | (1L << Not) | (1L << Tilde) | (1L << Identifier) | (1L << Constant) | (1L << StringLiteral))) != 0)) {
					{
					State = 251; calcExpression(0);
					}
				}

				State = 254; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MParser.Eof, 0); }
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_compilationUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; translationUnit(0);
			State = 258; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public TopLevelDeclarationContext topLevelDeclaration() {
			return GetRuleContext<TopLevelDeclarationContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		return translationUnit(0);
	}

	private TranslationUnitContext translationUnit(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TranslationUnitContext _localctx = new TranslationUnitContext(_ctx, _parentState);
		TranslationUnitContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_translationUnit, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 261; topLevelDeclaration();
			}
			_ctx.stop = _input.Lt(-1);
			State = 267;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TranslationUnitContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_translationUnit);
					State = 263;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 264; topLevelDeclaration();
					}
					} 
				}
				State = 269;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TopLevelAssignmentExpressionContext topLevelAssignmentExpression() {
			return GetRuleContext<TopLevelAssignmentExpressionContext>(0);
		}
		public PreprocessorDirectiveContext preprocessorDirective() {
			return GetRuleContext<PreprocessorDirectiveContext>(0);
		}
		public TopLevelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterTopLevelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitTopLevelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationContext topLevelDeclaration() {
		TopLevelDeclarationContext _localctx = new TopLevelDeclarationContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_topLevelDeclaration);
		try {
			State = 273;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; functionDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; topLevelAssignmentExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; preprocessorDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Inline) {
				{
				State = 275; Match(Inline);
				}
			}

			State = 278; typeSpecifier();
			State = 279; Match(Identifier);
			State = 280; Match(LeftParen);
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Char) | (1L << Int) | (1L << Void))) != 0)) {
				{
				State = 281; parameterDeclarationList(0);
				}
			}

			State = 284; Match(RightParen);
			State = 285; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmStatementContext : ParserRuleContext {
		public AsmStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterAsmStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitAsmStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmStatementContext asmStatement() {
		AsmStatementContext _localctx = new AsmStatementContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_asmStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(T__0);
			State = 291;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; Match(LeftBrace);
					}
					} 
				}
				State = 293;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			State = 294; Match(LeftBrace);
			State = 298;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << Break) | (1L << Char) | (1L << Continue) | (1L << Do) | (1L << Else) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Return) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Xor) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign) | (1L << Equal) | (1L << NotEqual) | (1L << Dot) | (1L << Identifier) | (1L << Filename) | (1L << Constant) | (1L << DigitSequence) | (1L << StringLiteral) | (1L << Whitespace) | (1L << Newline) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 295;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==RightBrace) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 300;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 301; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		public ITerminalNode Filename() { return GetToken(MParser.Filename, 0); }
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMListener typedListener = listener as IMListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMVisitor<TResult> typedVisitor = visitor as IMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_preprocessorDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__1);
			State = 304; Match(T__2);
			State = 305; Match(Filename);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return calcExpression_sempred((CalcExpressionContext)_localctx, predIndex);

		case 3: return initializerList_sempred((InitializerListContext)_localctx, predIndex);

		case 8: return parameterDeclarationList_sempred((ParameterDeclarationListContext)_localctx, predIndex);

		case 10: return paramterPassList_sempred((ParamterPassListContext)_localctx, predIndex);

		case 11: return parameterCallList_sempred((ParameterCallListContext)_localctx, predIndex);

		case 17: return statementList_sempred((StatementListContext)_localctx, predIndex);

		case 23: return translationUnit_sempred((TranslationUnitContext)_localctx, predIndex);
		}
		return true;
	}
	private bool calcExpression_sempred(CalcExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool initializerList_sempred(InitializerListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool parameterDeclarationList_sempred(ParameterDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool paramterPassList_sempred(ParamterPassListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool parameterCallList_sempred(ParameterCallListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool statementList_sempred(StatementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool translationUnit_sempred(TranslationUnitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3=\x136\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x5\x2O\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2W\n\x2"+
		"\f\x2\xE\x2Z\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\a\x5\x66\n\x5\f\x5\xE\x5i\v\x5\x3\x6\x5\x6l\n\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\a\t~\n\t\f\t\xE\t\x81\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x89\n\n\f"+
		"\n\xE\n\x8C\v\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x97\n"+
		"\f\f\f\xE\f\x9A\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xA2\n\r\f\r\xE\r"+
		"\xA5\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xAF\n\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\xC0\n\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xC9\n\x13\f\x13\xE\x13\xCC\v\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xD5\n\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\xEB\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\xF0\n\x16\x3\x16\x3\x16\x5\x16"+
		"\xF4\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x5\x17\xFF\n\x17\x3\x17\x5\x17\x102\n\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x10C\n\x19\f\x19\xE\x19\x10F\v"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x114\n\x1A\x3\x1B\x5\x1B\x117\n\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x11D\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C"+
		"\x3\x1C\a\x1C\x124\n\x1C\f\x1C\xE\x1C\x127\v\x1C\x3\x1C\x3\x1C\a\x1C\x12B"+
		"\n\x1C\f\x1C\xE\x1C\x12E\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x2\x2\t\x2\b\x12\x16\x18$\x30\x1E\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2\x2\a"+
		"\x5\x2\x19\x1F!!#*\x6\x2  \"\"&&+,\x5\x2\a\a\xF\xF\x11\x11\x3\x2\x13\x14"+
		"\x3\x2\x18\x18\x141\x2N\x3\x2\x2\x2\x4[\x3\x2\x2\x2\x6]\x3\x2\x2\x2\b"+
		"_\x3\x2\x2\x2\nk\x3\x2\x2\x2\fq\x3\x2\x2\x2\xEv\x3\x2\x2\x2\x10\x7F\x3"+
		"\x2\x2\x2\x12\x82\x3\x2\x2\x2\x14\x8D\x3\x2\x2\x2\x16\x90\x3\x2\x2\x2"+
		"\x18\x9B\x3\x2\x2\x2\x1A\xAE\x3\x2\x2\x2\x1C\xB0\x3\x2\x2\x2\x1E\xB3\x3"+
		"\x2\x2\x2 \xB9\x3\x2\x2\x2\"\xBD\x3\x2\x2\x2$\xC3\x3\x2\x2\x2&\xCD\x3"+
		"\x2\x2\x2(\xEA\x3\x2\x2\x2*\xEC\x3\x2\x2\x2,\x101\x3\x2\x2\x2.\x103\x3"+
		"\x2\x2\x2\x30\x106\x3\x2\x2\x2\x32\x113\x3\x2\x2\x2\x34\x116\x3\x2\x2"+
		"\x2\x36\x121\x3\x2\x2\x2\x38\x131\x3\x2\x2\x2:;\b\x2\x1\x2;O\a\x35\x2"+
		"\x2<O\a\x39\x2\x2=O\a\x37\x2\x2>?\a\x17\x2\x2?@\x5\b\x5\x2@\x41\a\x18"+
		"\x2\x2\x41O\x3\x2\x2\x2\x42\x43\x5\x6\x4\x2\x43\x44\x5\x2\x2\x6\x44O\x3"+
		"\x2\x2\x2\x45\x46\a\x13\x2\x2\x46G\x5\xE\b\x2GH\a\x14\x2\x2HI\x5\x2\x2"+
		"\x4IO\x3\x2\x2\x2JK\a\x13\x2\x2KL\x5\x2\x2\x2LM\a\x14\x2\x2MO\x3\x2\x2"+
		"\x2N:\x3\x2\x2\x2N<\x3\x2\x2\x2N=\x3\x2\x2\x2N>\x3\x2\x2\x2N\x42\x3\x2"+
		"\x2\x2N\x45\x3\x2\x2\x2NJ\x3\x2\x2\x2OX\x3\x2\x2\x2PQ\f\a\x2\x2QR\x5\x4"+
		"\x3\x2RS\x5\x2\x2\bSW\x3\x2\x2\x2TU\f\x5\x2\x2UW\x5\x6\x4\x2VP\x3\x2\x2"+
		"\x2VT\x3\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x3\x3\x2"+
		"\x2\x2ZX\x3\x2\x2\x2[\\\t\x2\x2\x2\\\x5\x3\x2\x2\x2]^\t\x3\x2\x2^\a\x3"+
		"\x2\x2\x2_`\b\x5\x1\x2`\x61\a\x37\x2\x2\x61g\x3\x2\x2\x2\x62\x63\f\x3"+
		"\x2\x2\x63\x64\a\x30\x2\x2\x64\x66\a\x37\x2\x2\x65\x62\x3\x2\x2\x2\x66"+
		"i\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\t\x3\x2\x2\x2ig\x3\x2\x2"+
		"\x2jl\x5\xE\b\x2kj\x3\x2\x2\x2kl\x3\x2\x2\x2lm\x3\x2\x2\x2mn\a\x35\x2"+
		"\x2no\a\x31\x2\x2op\x5\x2\x2\x2p\v\x3\x2\x2\x2qr\x5\xE\b\x2rs\a\x35\x2"+
		"\x2st\a\x31\x2\x2tu\x5\x2\x2\x2u\r\x3\x2\x2\x2vw\t\x4\x2\x2w\xF\x3\x2"+
		"\x2\x2x~\n\x5\x2\x2yz\a\x13\x2\x2z{\x5\x10\t\x2{|\a\x14\x2\x2|~\x3\x2"+
		"\x2\x2}x\x3\x2\x2\x2}y\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F"+
		"\x80\x3\x2\x2\x2\x80\x11\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x83\b\n\x1"+
		"\x2\x83\x84\x5\x14\v\x2\x84\x8A\x3\x2\x2\x2\x85\x86\f\x3\x2\x2\x86\x87"+
		"\a\x30\x2\x2\x87\x89\x5\x14\v\x2\x88\x85\x3\x2\x2\x2\x89\x8C\x3\x2\x2"+
		"\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x13\x3\x2\x2\x2\x8C\x8A"+
		"\x3\x2\x2\x2\x8D\x8E\x5\xE\b\x2\x8E\x8F\a\x35\x2\x2\x8F\x15\x3\x2\x2\x2"+
		"\x90\x91\b\f\x1\x2\x91\x92\x5\x2\x2\x2\x92\x98\x3\x2\x2\x2\x93\x94\f\x3"+
		"\x2\x2\x94\x95\a\x30\x2\x2\x95\x97\x5\x2\x2\x2\x96\x93\x3\x2\x2\x2\x97"+
		"\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x17\x3\x2"+
		"\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9C\b\r\x1\x2\x9C\x9D\x5\x2\x2\x2\x9D\xA3"+
		"\x3\x2\x2\x2\x9E\x9F\f\x3\x2\x2\x9F\xA0\a\x30\x2\x2\xA0\xA2\x5\x2\x2\x2"+
		"\xA1\x9E\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3"+
		"\x2\x2\x2\xA4\x19\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xAF\x5 \x11\x2\xA7"+
		"\xAF\x5\"\x12\x2\xA8\xAF\x5\x1C\xF\x2\xA9\xAF\x5&\x14\x2\xAA\xAF\x5(\x15"+
		"\x2\xAB\xAF\x5\x1E\x10\x2\xAC\xAF\x5,\x17\x2\xAD\xAF\x5\x36\x1C\x2\xAE"+
		"\xA6\x3\x2\x2\x2\xAE\xA7\x3\x2\x2\x2\xAE\xA8\x3\x2\x2\x2\xAE\xA9\x3\x2"+
		"\x2\x2\xAE\xAA\x3\x2\x2\x2\xAE\xAB\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAE"+
		"\xAD\x3\x2\x2\x2\xAF\x1B\x3\x2\x2\x2\xB0\xB1\x5\n\x6\x2\xB1\xB2\a/\x2"+
		"\x2\xB2\x1D\x3\x2\x2\x2\xB3\xB4\a\x35\x2\x2\xB4\xB5\a\x13\x2\x2\xB5\xB6"+
		"\x5\x18\r\x2\xB6\xB7\a\x14\x2\x2\xB7\xB8\a/\x2\x2\xB8\x1F\x3\x2\x2\x2"+
		"\xB9\xBA\a\x35\x2\x2\xBA\xBB\a.\x2\x2\xBB\xBC\x5\x1A\xE\x2\xBC!\x3\x2"+
		"\x2\x2\xBD\xBF\a\x17\x2\x2\xBE\xC0\x5$\x13\x2\xBF\xBE\x3\x2\x2\x2\xBF"+
		"\xC0\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\a\x18\x2\x2\xC2#\x3\x2\x2"+
		"\x2\xC3\xC4\b\x13\x1\x2\xC4\xC5\x5\x1A\xE\x2\xC5\xCA\x3\x2\x2\x2\xC6\xC7"+
		"\f\x3\x2\x2\xC7\xC9\x5\x1A\xE\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2"+
		"\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB%\x3\x2\x2\x2\xCC\xCA\x3"+
		"\x2\x2\x2\xCD\xCE\a\r\x2\x2\xCE\xCF\a\x13\x2\x2\xCF\xD0\x5\x2\x2\x2\xD0"+
		"\xD1\a\x14\x2\x2\xD1\xD4\x5\x1A\xE\x2\xD2\xD3\a\n\x2\x2\xD3\xD5\x5\x1A"+
		"\xE\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\'\x3\x2\x2\x2\xD6\xD7"+
		"\a\x12\x2\x2\xD7\xD8\a\x13\x2\x2\xD8\xD9\x5\x2\x2\x2\xD9\xDA\a\x14\x2"+
		"\x2\xDA\xDB\x5\x1A\xE\x2\xDB\xEB\x3\x2\x2\x2\xDC\xDD\a\t\x2\x2\xDD\xDE"+
		"\x5\x1A\xE\x2\xDE\xDF\a\x12\x2\x2\xDF\xE0\a\x13\x2\x2\xE0\xE1\x5\x2\x2"+
		"\x2\xE1\xE2\a\x14\x2\x2\xE2\xE3\a/\x2\x2\xE3\xEB\x3\x2\x2\x2\xE4\xE5\a"+
		"\v\x2\x2\xE5\xE6\a\x13\x2\x2\xE6\xE7\x5*\x16\x2\xE7\xE8\a\x14\x2\x2\xE8"+
		"\xE9\x5\x1A\xE\x2\xE9\xEB\x3\x2\x2\x2\xEA\xD6\x3\x2\x2\x2\xEA\xDC\x3\x2"+
		"\x2\x2\xEA\xE4\x3\x2\x2\x2\xEB)\x3\x2\x2\x2\xEC\xED\x5\n\x6\x2\xED\xEF"+
		"\a/\x2\x2\xEE\xF0\x5\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2"+
		"\xF0\xF1\x3\x2\x2\x2\xF1\xF3\a/\x2\x2\xF2\xF4\x5\n\x6\x2\xF3\xF2\x3\x2"+
		"\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4+\x3\x2\x2\x2\xF5\xF6\a\f\x2\x2\xF6\xF7"+
		"\a\x35\x2\x2\xF7\x102\a/\x2\x2\xF8\xF9\a\b\x2\x2\xF9\x102\a/\x2\x2\xFA"+
		"\xFB\a\x6\x2\x2\xFB\x102\a/\x2\x2\xFC\xFE\a\x10\x2\x2\xFD\xFF\x5\x2\x2"+
		"\x2\xFE\xFD\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x102\a/\x2\x2\x101\xF5\x3\x2\x2\x2\x101\xF8\x3\x2\x2\x2\x101\xFA\x3\x2"+
		"\x2\x2\x101\xFC\x3\x2\x2\x2\x102-\x3\x2\x2\x2\x103\x104\x5\x30\x19\x2"+
		"\x104\x105\a\x2\x2\x3\x105/\x3\x2\x2\x2\x106\x107\b\x19\x1\x2\x107\x108"+
		"\x5\x32\x1A\x2\x108\x10D\x3\x2\x2\x2\x109\x10A\f\x3\x2\x2\x10A\x10C\x5"+
		"\x32\x1A\x2\x10B\x109\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2"+
		"\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x31\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2"+
		"\x110\x114\x5\x34\x1B\x2\x111\x114\x5\f\a\x2\x112\x114\x5\x38\x1D\x2\x113"+
		"\x110\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x112\x3\x2\x2\x2\x114\x33"+
		"\x3\x2\x2\x2\x115\x117\a\xE\x2\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2"+
		"\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\x5\xE\b\x2\x119\x11A\a\x35\x2\x2"+
		"\x11A\x11C\a\x13\x2\x2\x11B\x11D\x5\x12\n\x2\x11C\x11B\x3\x2\x2\x2\x11C"+
		"\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\a\x14\x2\x2\x11F\x120"+
		"\x5\x1A\xE\x2\x120\x35\x3\x2\x2\x2\x121\x125\a\x3\x2\x2\x122\x124\a\x17"+
		"\x2\x2\x123\x122\x3\x2\x2\x2\x124\x127\x3\x2\x2\x2\x125\x123\x3\x2\x2"+
		"\x2\x125\x126\x3\x2\x2\x2\x126\x128\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2"+
		"\x128\x12C\a\x17\x2\x2\x129\x12B\n\x6\x2\x2\x12A\x129\x3\x2\x2\x2\x12B"+
		"\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12F"+
		"\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12F\x130\a\x18\x2\x2\x130\x37\x3\x2"+
		"\x2\x2\x131\x132\a\x4\x2\x2\x132\x133\a\x5\x2\x2\x133\x134\a\x36\x2\x2"+
		"\x134\x39\x3\x2\x2\x2\x1BNVXgk}\x7F\x8A\x98\xA3\xAE\xBF\xCA\xD4\xEA\xEF"+
		"\xF3\xFE\x101\x10D\x113\x116\x11C\x125\x12C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace M
